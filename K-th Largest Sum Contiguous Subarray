
class Solution {
    public static int kthLargest(int n, int k, int[] arr) {
         PriorityQueue<Integer> que = new PriorityQueue<Integer> (
            new Comparator<Integer> () {
                public int compare(Integer a, Integer b) {
                    return a - b;
                }
            }
        );
        
        for(int i = 0; i < n; i++ ) {
            int sum = 0;
            for(int j = i; j < n; j++) {
                sum += arr[j];
                que.add(sum);
            }
            
            while(que.size() > k) {
                que.remove();
            }
        }
        
        return que.peek();
    }
}
        


/*



class Solution {
    public static int kthLargest(int n, int k, int[] arr) {
         PriorityQueue<Integer> que = new PriorityQueue<Integer> (
            new Comparator<Integer> () {
                public int compare(Integer a, Integer b) {
                    return b - a;
                }
            }
        );
        
        for(int i = 0; i < n; i++ ) {
            int sum = 0;
            for(int j = i; j < n; j++) {
                sum += arr[j];
                que.add(sum);
            }
        }
        
        while(k > 1) {
            que.poll();
            k--;
        }
        
        return que.peek();
    }
}
        

*/
