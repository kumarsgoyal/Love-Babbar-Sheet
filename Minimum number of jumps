class Solution{
    static int minJumps(int[] arr){
        int n = arr.length;
        
        if(n == 1) 
            return 0;
            
        if(arr[0] == 0) 
            return -1;
        
        if(arr[0] >= n - 1) 
            return 1;
        
        int maxReach = arr[0];
        int steps = arr[0];
        int jumps = 1;
        
        for(int i = 1; i < n; i++) {
            if(i == n - 1)
                return jumps;
                
            if(arr[i] >= (n - 1) - i)
                return jumps + 1;
                
            maxReach = Math.max(maxReach, arr[i] + i);
            steps--;
            
            if(steps == 0) {
                jumps++;
                if(i >= maxReach) 
                    return -1;
                steps = maxReach - i;
            }
        }
        
        return -1;
    }
}



/*
class Solution{

    static int minJumps(int[] arr) {
        int n = arr.length;
        int[] jumps = new int[n];
        
        jumps[n - 1] = 0;
        
        for(int i = n - 2; i >= 0; i--) {
            if(arr[i] == 0) {
                jumps[i] = Integer.MAX_VALUE;
            }
            else if(arr[i] >= (n - i - 1)) {
                jumps[i] = 1;
            }
            else {
                int min = Integer.MAX_VALUE;
                for(int j = i + 1; j < n && j <= arr[i] + i; j++) {
                    if(min > jumps[j]) {
                        min = jumps[j];
                    }
                }
 
                if (min != Integer.MAX_VALUE) {
                    jumps[i] = min + 1;
                }
                else {                // Handle overflow
                    jumps[i] = min;
                }
            }
        }
        
        return (jumps[0] == Integer.MAX_VALUE) ? -1 : jumps[0];
    }
}
*/
