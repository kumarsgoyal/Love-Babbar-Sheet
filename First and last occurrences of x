
class GFG {
    
    ArrayList<Long> find(long arr[], int n, int x) {
        ArrayList<Long> res = new ArrayList<> ();
        res.add((long) lowerBound(arr, x, 0, n-1));
        res.add((long) upperBound(arr, x, 0, n-1));
        
        return res;
    }
    
    private int lowerBound(long[] arr, int x, int low, int high) {
        if(high >= low) {
            int mid = low + (high - low) / 2;
            if( (mid == 0 || arr[mid - 1] < x)
                && arr[mid] == x) {
                return mid;
            }
            else if(x > arr[mid]) {
                return lowerBound(arr, x, mid + 1, high);
            }
            else {
                return lowerBound(arr, x, low, mid - 1);
            }
        }
        return -1;
    }
    
    private int upperBound(long[] arr, int x, int low, int high) {
        if(high >= low) {
            int mid = low + (high - low) / 2;
            if( (mid == (arr.length - 1) || arr[mid + 1] > x)
                && arr[mid] == x) {
                return mid;
            }
            else if(x < arr[mid]) {
                return upperBound(arr, x, low, mid - 1);
            }
            else {
                return upperBound(arr, x, mid + 1, high);
            }
        }
        return -1;
    }
}
