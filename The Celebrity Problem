class Solution { 
    //Function to find if there is a celebrity in the party or not.
    int celebrity(int M[][], int n) {
    	
    	for(int i = 0; i < n; i++) {
    	    boolean flag = true;
    	    
    	    for(int r = 0; r < n; r++) {
    	        if(M[i][r] != 0) {
    	            flag = false;
    	            break;
    	        }
    	    }
    	    
    	    for(int c = 0; c < n; c++) {
    	        if(i != c && M[c][i] != 1) {
    	            flag = false;
    	            break;
    	        }
    	    }
    	    
    	    if(flag == true) 
    	        return i;
    	}
    	
    	return -1;
    }
}


/*

class Solution { 
    //Function to find if there is a celebrity in the party or not.
    int celebrity(int M[][], int n) {
        
        Stack<Integer> stack = new Stack<> ();
        
        for(int i = 0; i < n; i++) {
            stack.push(i);
        }
        
        while(stack.size() > 1) {
            int A = stack.pop();  
            int B = stack.pop();  
            
            if(M[A][B] == 1) { 
                stack.push(B); 
            }
            else { 
                stack.push(A); 
            }
        }
    
        
    	if(stack.size() == 1) {
        	int candidate = stack.pop();
        	boolean flag = true;
        	    
        	for(int r = 0; r < n; r++) { 
        	    if(M[candidate][r] != 0) { 
        	        flag = false; 
        	        break; 
        	    }
        	}
        	    
        	for(int c = 0; c < n; c++) {
        	    if(candidate != c && M[c][candidate] != 1) {
        	        flag = false;
        	        break;
        	    }
        	}
        	    
        	if(flag == true) 
        	    return candidate;
    	}
    	
    	return -1;
    }
}
 
*/
