class Solution
{
    //Function to build a Heap from array.
    void buildHeap(int arr[], int n) {
        for(int i = n / 2 - 1; i >= 0; i--) 
            heapify(arr, n, i);
            
        for(int i = n - 1; i > 0; i--) {
            swap(arr, 0, i);
            heapify(arr, i, 0);
        }
    }
 
    //Heapify function to maintain heap property.
    void heapify(int arr[], int n, int i) {
        int largestIndex = i;
        int leftChildIndex = 2 * i + 1;
        int rightChildIndex = 2 * i + 2;
        
        if(leftChildIndex < n && arr[leftChildIndex] > arr[largestIndex]) 
            largestIndex = leftChildIndex;
        if(rightChildIndex < n && arr[rightChildIndex] > arr[largestIndex]) 
            largestIndex = rightChildIndex;
            
        if(largestIndex != i) {
            swap(arr, largestIndex, i);
            heapify(arr, n, largestIndex);
        }
    }
    
    private void swap(int arr[],int largestIndex, int i) {
        int temp = arr[largestIndex];
        arr[largestIndex] = arr[i];
        arr[i] = temp;
    }
    
    //Function to sort an array using Heap Sort.
    public void heapSort(int arr[], int n) {
        buildHeap(arr, n);
    }
 }
